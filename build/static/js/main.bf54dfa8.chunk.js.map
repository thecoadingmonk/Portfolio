{"version":3,"sources":["assets/profile_pic.jpg","components/Hero/Hero.tsx","components/Info/Info.tsx","hooks/useDarkMode.ts","hooks/useDarkModeToggle.ts","constants/localStorageKeys.ts","containers/Home/Home.tsx","containers/Navigator/Navigator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Hero","className","Info","useDarkMode","useState","window","matchMedia","matches","isDarkMode","setIsDarkMode","useEffect","mq","handleModeChange","e","addEventListener","removeEventListener","useDarkModeToggle","localStorage","getItem","isEnabled","setIsEnabled","setItem","Home","isMenuClicked","isMenuOpen","burgerTopRef","useRef","burgerBottomRef","burgerMiddleRef","toggleRef","wipeRef","gsap","to","current","rotation","transformOrigin","y","width","bodyTag","document","querySelector","classList","toggle","src","require","href","onClick","timeline","x","set","height","top","add","wipeScreen","viewBox","fill","xmlns","rx","stroke","strokeWidth","cx","cy","r","fillOpacity","transform","ref","Navigator","isOpen","App","setIsMenuOpen","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bf54dfa8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile_pic.4e116130.jpg\";","import React from 'react';\nimport './Hero.css';\n\nconst Hero = () => {\n  return (\n    <div className='hero'>\n      <div className='hero-text'>\n        <h3>\n          While the rest of the world tries to run away from a problem, I would\n          love\n        </h3>\n        <h3>\n          to chase it and solve it. Ever since I was young, solving problems\n          have\n        </h3>\n        <h3>\n          been my passion. I started from a cross-word puzzle, sudoku, now\n          solving\n        </h3>\n        <h3>\n          relevant real-world problems using my skill set and experience that I\n          have\n        </h3>\n        <h3>gained over the years.</h3>\n      </div>\n      {/* <div className='wave wave1'></div>\n      <div className='wave wave2'></div>\n      <div className='wave wave3'></div>\n      <div className='wave wave4'></div>\n      <div className='wave wave5'></div>\n      <div className='wave wave6'></div>\n      <div className='wave wave7'></div> */}\n    </div>\n  );\n};\n\nexport default Hero;\n","import React from 'react';\nimport './info.css';\n\nconst Info = () => {\n    return(\n        <div className=\"container\">\n            <div className=\"inner\">\n                <span>i</span>\n                <h1>\n                    Hey\n                </h1>\n                <p>Sorry nothing works here yet!</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Info;\n","import { useEffect, useState } from \"react\";\n\nconst useDarkMode = () => {\n  const [isDarkMode, setIsDarkMode] = useState(\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n  );\n\n  useEffect(() => {\n    const mq = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n    const handleModeChange = (e: MediaQueryListEvent) => {\n      if (e.matches) {\n        setIsDarkMode(true);\n      } else {\n        setIsDarkMode(false);\n      }\n    };\n\n    mq.addEventListener(\"change\", handleModeChange);\n\n    return () => mq.removeEventListener(\"change\", handleModeChange);\n  }, []);\n\n  return isDarkMode;\n};\n\nexport default useDarkMode;\n","import { useEffect, useState } from 'react';\nimport { USER_THEME_PREFERENCE } from '../constants/localStorageKeys';\nimport useDarkMode from './useDarkMode';\n\nconst useDarkModeToggle = (): [\n  boolean,\n  React.Dispatch<React.SetStateAction<boolean>>\n] => {\n  const isDarkMode = useDarkMode();\n  const [isEnabled, setIsEnabled] = useState(\n    localStorage.getItem(USER_THEME_PREFERENCE)\n      ? localStorage.getItem(USER_THEME_PREFERENCE) === 'dark'\n        ? true\n        : false\n      : isDarkMode\n  );\n\n  useEffect(() => {\n    localStorage.setItem(USER_THEME_PREFERENCE, isEnabled ? 'dark' : 'light');\n  }, [isEnabled]);\n\n  return [isEnabled, setIsEnabled];\n};\n\nexport default useDarkModeToggle;\n","export const USER_THEME_PREFERENCE = \"@samartha/theme_preference\";\n","import React, { useEffect, useRef } from 'react';\nimport './Home.css';\nimport '../../App.css';\nimport gsap from 'gsap';\nimport useDarkModeToggle from '../../hooks/useDarkModeToggle';\n\nexport interface HomeProps {\n  isMenuOpen: boolean;\n  isMenuClicked: (arg0: boolean) => void;\n}\n\nconst Home = ({ isMenuClicked, isMenuOpen }: HomeProps) => {\n  const [isDarkMode, setIsDarkMode] = useDarkModeToggle();\n\n  const burgerTopRef = useRef(null);\n  const burgerBottomRef = useRef(null);\n  const burgerMiddleRef = useRef(null);\n  const toggleRef = useRef(null);\n  const wipeRef = useRef(null);\n\n  useEffect(() => {\n    if (isMenuOpen) {\n      gsap.to(burgerTopRef.current, {\n        rotation: 45,\n        transformOrigin: '50% 50%',\n        y: 8,\n      });\n      gsap.to(burgerBottomRef.current, {\n        rotation: -45,\n        transformOrigin: '50% 50%',\n        y: -8,\n      });\n      gsap.to(burgerMiddleRef.current, {\n        width: 0,\n      });\n    } else {\n      gsap.to(burgerTopRef.current, { rotation: 0, y: 0 });\n      gsap.to(burgerBottomRef.current, { rotation: 0, y: 0 });\n      gsap.to(burgerMiddleRef.current, {\n        width: 28,\n      });\n    }\n  }, [isMenuOpen]);\n\n  useEffect(() => {\n    if (isDarkMode) {\n      const bodyTag = document.querySelector('body');\n      bodyTag?.classList.toggle('dark-mode');\n    }\n  }, []);\n\n  const wipeScreen = () => {\n    const timeline = gsap.timeline();\n    const bodyTag = document.querySelector('body');\n\n    if (isDarkMode) {\n      timeline.to(toggleRef.current, { x: 43 });\n    } else {\n      timeline.to(toggleRef.current, { x: 19 });\n    }\n    setIsDarkMode(!isDarkMode);\n\n    timeline\n      .set(wipeRef.current, { height: '0%', top: '0%' })\n      .to(wipeRef.current, { height: '100%' })\n      .add(() => {\n        bodyTag?.classList.toggle('dark-mode');\n      })\n      .to(wipeRef.current, { height: '0%', top: '100%' });\n  };\n\n  return (\n    <section>\n      <div className='header'>\n        <img\n          className='avatar'\n          src={require('../../assets/profile_pic.jpg')}\n        ></img>\n        <div className='title'>\n          <h1>\n            <span>S</span>AMARTHA <span>H</span>EGDE\n          </h1>\n          <span className='designation'>Front-end developer @OSlash.</span>\n        </div>\n      </div>\n      <a href='#' className='dark-mode-toggle' onClick={() => wipeScreen()}>\n        <svg\n          width='64'\n          height='40'\n          viewBox='0 0 64 40'\n          fill='none'\n          xmlns='http://www.w3.org/2000/svg'\n        >\n          <rect\n            x='8'\n            y='9'\n            width='46'\n            height='22'\n            rx='11'\n            stroke='black'\n            strokeWidth='2'\n          />\n          <circle cx='19' cy='20' r='6' fill='black' fillOpacity='0.5' />\n          <g transform='translate(19, 20)' className='toggle' ref={toggleRef}>\n            <circle cx='0' cy='0' r='6' fill='black' />\n          </g>\n          <circle cx='43' cy='20' r='6' fill='black' fillOpacity='0.5' />\n        </svg>\n      </a>\n      <a href='#' className='menu-toggle' onClick={() => isMenuClicked(true)}>\n        <svg\n          width='40'\n          height='40'\n          viewBox='0 0 40 40'\n          fill='none'\n          xmlns='http://www.w3.org/2000/svg'\n        >\n          <rect\n            x='6'\n            y='10'\n            width='28'\n            height='4'\n            fill='black'\n            className='burger-top'\n            ref={burgerTopRef}\n          />\n          <rect\n            x='6'\n            y='18'\n            width='28'\n            height='4'\n            fill='black'\n            className='burger-middle'\n            ref={burgerMiddleRef}\n          />\n          <rect\n            x='6'\n            y='26'\n            width='28'\n            height='4'\n            fill='black'\n            className='burger-bottom'\n            ref={burgerBottomRef}\n          />\n        </svg>\n      </a>\n      <div className='wipe' ref={wipeRef}></div>\n    </section>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./Navigator.css\";\n\nexport interface NavigatorProps {\n  isOpen: boolean;\n}\n\nconst Navigator = ({ isOpen }: NavigatorProps) => {\n  return (\n    <>\n      <nav className={`${isOpen ? \"fake-back\" : \"fake-back-close\"}`}></nav>\n      <nav className={`${isOpen ? \"fake-mid\" : \"fake-mid-close\"}`}></nav>\n      <nav className={`${isOpen ? \"nav-open\" : \"\"}`}>\n        <div className=\"internal\">\n          <a href=\"#\">About</a>\n          <a href=\"#\">Blog</a>\n          <a href=\"#\">Projects</a>\n        </div>\n        <div className=\"external\">\n          <a href=\"#\">Github</a>\n          <a href=\"#\">Instagram</a>\n          <a href=\"#\">Facebook</a>\n          <a href=\"#\">Twitter</a>\n        </div>\n      </nav>\n    </>\n  );\n};\n\nexport default Navigator;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Hero from './components/Hero/Hero';\nimport Info from './components/Info/Info';\nimport Home from './containers/Home/Home';\nimport Navigator from './containers/Navigator/Navigator';\n\nfunction App() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  return (\n    <>\n      <Home\n        isMenuClicked={() => setIsMenuOpen(!isMenuOpen)}\n        isMenuOpen={isMenuOpen}\n      />\n      <Navigator isOpen={isMenuOpen} />\n      <div className={`${isMenuOpen ? 'move-body' : ''} main`}>\n        <Hero />\n      </div>\n      <Info />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}